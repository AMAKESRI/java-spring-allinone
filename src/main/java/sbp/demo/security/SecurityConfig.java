package sbp.demo.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

import javax.sql.DataSource;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

//    By default Spring Security secure any http request using its autogenerated login form.

    @Autowired
    DataSource dataSource;

    @Override
    public void configure(AuthenticationManagerBuilder auth) throws Exception {
//        basic in-memory authentication config
//        auth.inMemoryAuthentication()
//                .withUser("user")
//                .password(passwordEncoder().encode("password"))
//                .roles("USER")
//                .and()
//                .withUser("admin")
//                .password(passwordEncoder().encode("password"))
//                .roles("ADMIN");

//        h2 jdbcAuthentication
//        auth.jdbcAuthentication()
//                .dataSource(dataSource)
//                .withDefaultSchema()
//                .withUser(User.withUsername("user")
//                        .password(passwordEncoder().encode("password"))
//                        .roles("USER"))
//                .withUser(User.withUsername("admin")
//                        .password(passwordEncoder().encode("password"))
//                        .roles("ADMIN"));

//        jdbcAuthentication
        auth.jdbcAuthentication()
                .dataSource(dataSource);
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

//    enable HTTP Security
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/h2-console/**").permitAll()
                // basic security endpoint for testing spring security
                .antMatchers("/security-test/public").permitAll()
                .antMatchers("/security-test/user/**").access("hasRole('USER')")
                .antMatchers("/security-test/admin/**").hasRole("ADMIN")
                .anyRequest().authenticated()
                .and()
                // some more method calls
                // if the user is not connected, force the user to connect from the autogenerated login form
                .formLogin()
                // to customize the page of login
                // .formLogin().loginPage("/login").permitAll();
                ;

//        Spring Security automatically configures a logout endpoint "/logout"


        http.csrf().ignoringAntMatchers("/h2-console/**"); // ignore CSRF protection of Spring Security for h2 console to enable the execution of h2 console requests
        http.headers().frameOptions().sameOrigin(); // by default the X-Frame-Options header added to the http response has "DENY", which prevents the html frames to be rendered for h2 console.
    }
}
